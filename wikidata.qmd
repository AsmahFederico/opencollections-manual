# Wikidata and Other Open Knowledge Graphs {#wikidata-open-graph}

A knowledge graph represents a network of real-world entities—such as objects, events, situations or concepts—and illustrates the relationship between them.

Most companies and institutions work with a variety of information systems that are not well integrated. Information is located in different places, inside and outside the organisation, and it cannot be accessed as a whole. In the last decades, it has become clear that unifying these information sources into central databases or data lakes is rarely a good solution. Creating such centralised data stores is very costly and requires a lot of organisation, and by the time the centralisation is completed and finished, it usually turns out that the organisation needs different knowledge and a different organisation of the data.

Here's where knowledge graphs come in. They have the unique ability to automatically integrate and present a unified view of diverse and initially unrelated data sources. For instance, in an enterprise, they can power initiatives like Customer 360. Moreover, knowledge graphs are an ideal tool for implementing the Human-in-the-Loop (HITL) design principle in AI deployment. They offer a comprehensive view of the knowledge base that algorithms rely on, enhancing oversight and control.

## Connect to Wikidata {#sec-wikidata}

Wikidata is a collaboratively edited multilingual knowledge graph hosted by the Wikimedia Foundation. It is a common source of open data that Wikimedia projects such as Wikipedia, and anyone else, is able to use under the CC0 public domain license. As of early 2023, Wikidata had 1.54 billion item statements, or small, verifiable, scientific statements about our world.

Wikidata is a [document-oriented database](https://en.wikipedia.org/wiki/Document-oriented_database "Document-oriented database"), focusing on items, which represent any kind of topic, concept, or object.

![Wikidata is an document-oriented database. This document connect a lot of knowledge about the late English writer and humorist, Douglas Adams.](png/wikidata/File_Datamodel_in_Wikidata.png){fig-align="center"}

We say that the knowledge graphs is connecting things in the real world, because its nodes, in Wikidata, the conceptual document, represent people, objects, and their relationships as they are out there, and not as they are represented by an "ordinary" database. The [Q42](https://www.wikidata.org/wiki/Q42) document about the late English writer and humorist Douglas Adams connects facts about his life (birthday, place of birth, time of death), and connects him to his books, their translations, identifiers to look up these books, and so on.

Wikidata is a knowledge graph, so it is connecting the Q42 concept of Douglas Adams, in honour of the most quoted humorous episode from his world-famous *Hitchhiker's Guide to the Galaxy*, to the [Q25169](https://www.wikidata.org/wiki/Q25169) concept, which is a similarly structured document about the five books of his series which is further connected in the graph to its Serbian translation ([Q117279887](https://www.wikidata.org/wiki/Q117279887)).

Wikidata is not a database but a very useful system for filling up and keeping many databases in sync worldwide. If your own institutional or private library has a catalogue, you may have a copy of the *Hitchhiker's Guide to the Galaxy*; in this case, your catalogue is likely to have a local, private identifier to your copy of the book. Imagine your little private catalogue, where you, like the editors of Wikidata, reserved the #42 entry to Douglas Adams' book.

| ID    | Author                                                         | Title                                                                               |
|-------------------|-------------------|----------------------------------|
| My-01 | Martell, Yann ([Q13914](https://www.wikidata.org/wiki/Q13914)) | *Life of Pi* ([Q374204](https://www.wikidata.org/wiki/Q374204))                     |
| ...   | ...                                                            | ...                                                                                 |
| My-42 | Adams, Douglas ([Q42](https://www.wikidata.org/wiki/Q42))      | *Hitchhiker's Guide to the Galaxy (*[Q25169](https://www.wikidata.org/wiki/Q25169)) |
| ...   | ...                                                            | ...                                                                                 |

If you can connect your My-42 entry with [Q25169](https://www.wikidata.org/wiki/Q25169) on Wikidata, you can import a wealth of information into your private catalogue. And if you add [Q42](https://www.wikidata.org/wiki/Q42) to the author Douglas Adams, you can import a lot of knowledge, for example, information about his other works or the end of the copyright protection term of these books, after which they will become public domain and free for copying and distribution.

In Wikidata, each item has a unique, [persistent identifier](https://en.wikipedia.org/wiki/Persistent_identifier), a positive integer prefixed with the upper-case letter Q, known as a "QID".Global information systems like to anchor authoritative information about people, books, musical works, and other important things to persistent identifiers.For example, in the Portugese National Library, Douglas Adams' persistent identifier is [68537](http://id.bnportugal.gov.pt/aut/catbnp/68537), whereas in VIAF, the authority file that keeps information synchronised across national libraries it is [113230702](https://viaf.org/viaf/113230702/). Wikidata is particularly useful because it serves as an "identity broker", and this linking information can be retrieved directly from Douglas Adams' [Q42](https://www.wikidata.org/wiki/Q42) page.

### Getting started with Wikidata {#sec-getting-started-wikidata}

#### Global Identities

Mr and Mrs Barasits, a.k.a. `János Barasits` (1859-1935) and his wife, `Barasits, Jánosné`, born Pichler, Kornélia, were prominent postcard producers and publishers at the beginning of the 20th century. They produced plenty of beautiful postcards.

In the 1920s and 1930s, the authors' right (\~copyright) protection of photographs and postcards was relatively short, only 15 years, so their postcards went into the public domain in terms of copying long ago. There are plenty of their beautiful works is out there on the internet, but it is very hard to put them into a collection, because most databases know next to nothing about the identities of these creators.

Unfortunately, I did not find their name in the most commonly used authority controls, i.e., VIAF or ISNI. Writing to VIAF is only possible via member institutions, and ISNI costs money. As a temporary solution, I created a Wikidata QID for János Barakovits until somebody registers his name into VIAF. Now, it will get easier and easier to find further postcards from them, or other information about them all over the world!

Writing in Wikidata is free for all and subject to community review. If you read this tutorial, please pledge to record new persons (or other items) into Wikidata if your knowledge is solid. You can verify the information with research.

#### Create a Wikidata Item

In this tutorial, you learn how to create a new item on Wikidata. Countless web and AI applications use Wikidata; millions of people use it, so they do not experiment with it in the live system. Wikidata has a [Sandbox](https://www.wikidata.org/wiki/Wikidata:Sandbox) for practising. We recommend using it as a first step. If you work with Wikibase, particularly with Reprex's OpenCollections, you will have access to a similar sandbox. It will be prefilled with data, concepts, and properties suitable for your needs, often going beyond what you would find in the public Wikidata.

![](png/wikidata-tutorial/wikidata-create-new-item-20240204.png){fig-align="center"}

After filling out the most important information, the "Label" of the new information entity and its brief description (in this case, János Barasits in English, and Barasits János in Hungarian, following the Eastern name order) we can weave this information entry the knowledge graphs. At a start, `János Barasits` could be a person, it could be a book titled after the person, or a photo of the person. Connecting János Barasits to other entities, such as the concept a human being, will allow other people and their computer systems to understand that we are talking about a person here.

![](png/wikidata-tutorial/wikidata-create-new-item-Janos-Barasits-20240204-2.png){fig-align="center"}

Add a few, basic statements to your new item, for example, the János Barasits is a human, he was male, born in 1859 (with the precision of a year only) and died in 1935.

![](png/wikidata-tutorial/wikidata-create-new-item-Janos-Barasits-20240204-3.png){fig-align="center"}

The four characters, `1935` can be understood as a number for most readers, but such a data point without meaning is useless. When we add the "metadata", and we connect 1935 to the definition of `date of death`, we add meaning ("semantics") to the number 1935.

The definition of date of death is useful in a database, but in a knowledge base, we can do a lot more with this piece of information. We can add the knowledge of the fact that in Europe the copyright protection term of a people's creation runs up to 70 years after their death. Such a knowledge base can infere the fact that János Barasits's postcards are out of copyright and they can be freely copied and distributed!

Here is a very basic Wikidata page for [János Barasits](https://www.wikidata.org/wiki/Q124423018). What is very important that we have a globally unique identifier, `Q124423018` that uniquely identifies him as a human. If you have a collection of postcards (digitals or analogue, vintage physical objects), connecting your own database with `Q124423018` will help you to import the knowledge of the expired copyright protection term; it will help you finding other out-of-copyright scanned copies of Barasits' postcards; connect to other collections that hold items from them, and so on.

### Retrieve an item from Wikidata

Many internal enterprise resource systems or APIs use SQL, a 50+ year-old data query language. SQL is the lingua franca of relational database systems; you may be familiar with it. Can you query Wikidata in SQL?

Not exactly. It requires a different querying language, which was developed for knowledge graphs. It is called SPARQL because it is similar to SQL, but they are rather distant cousins.

While SQL is widely used, it does have a significant limitation: your query scripts are specific to one database system or API. What works in your internal catalogue may not function in another organization's. If you've written a script to update your data from a specific web API, it doesn't guarantee that the script will be compatible with another API. Furthermore, it's not future-proof: if the API owner (or your database manager) makes even a slight adjustment to the system, you may need to modify or rewrite your retrieval code.

Remember, the significant advantage of Wikidata and other open knowledge graphs is that millions of people work on improvements and extensions daily. This means that an SQL request would be outdated every day. Instead of SQL, SPARQL queries do not look for cells in data tables, but they use intelligent knowledge to find the cells containing data about what you need. In SQL, you need to know which table contains people's birthdays and death dates to find out the year when János Barasits died. In SPARQL, you are looking for the cell that contains the date of death for the human known as János Barasits.

### SPARQL basics {#sec-sparql}

A simple SPARQL query looks like this:

```{r minimal-sparql-query, eval=FALSE}
SELECT ?a ?b ?c
WHERE
{
  x y ?a.
  m n ?b.
  ?b f ?c.
}
```

Suppose we want to list all children of the baroque composer Johann Sebastian Bach. Using pseudo-elements like in the queries above, how would you write that query?

Hopefully you got something like this:

```{r child-parent-bach, eval=FALSE}
SELECT ?child
WHERE
{
  #  child "has parent" Bach
  ?child parent Bach.
  # (note: everything after a ‘#’ is a comment and ignored by WDQS.)
}
```

or this,

```{r bach-father, eval=FALSE}
SELECT ?child
WHERE
{
  # child "has father" Bach 
  ?child father Bach. 
}
```

or this,

```{r bach-child, eval=FALSE}
SELECT ?child
WHERE
{
  #  Bach "has child" child
  Bach child ?child.
}
```

The first two triples say that the ?child must have the parent/father Bach; the third says that Bach must have the child ?child. Let’s go with the second one for now.

So what remains to be done in order to turn this into a proper WDQS query? On Wikidata, items and properties are not identified by human-readable names like “father” (property) or “Bach” (item). (For good reason: “Johann Sebastian Bach” is also the name of a German painter, and “Bach” might also refer to the surname, the French commune, the Mercury crater, etc.) Instead, Wikidata items and properties are assigned an identifier. To find the identifier for an item, we search for the item and copy the Q-number of the result that sounds like it’s the item we’re looking for (based on the description, for example). To find the identifier for a property, we do the same, but search for “P:search term” instead of just “search term”, which limits the search to properties. This tells us that the famous composer Johann Sebastian Bach is `Q1339`, and the property to designate an item’s father is `P:P22`.

And last but not least, we need to include prefixes. For simple WDQS triples, items should be prefixed with `wd:`, and properties with `wdt:`. (But this only applies to fixed values – variables don’t get a prefix!)

Putting this together, we arrive at our first proper WDQS query:

```{r, eval=FALSE}
SELECT ?child
WHERE
{
# ?child  father   Bach
  ?child wdt:P22 wd:Q1339.
}
```

Try the first query:

[![Click on the image to try it out live on the Wikidata SPARQL Endpoint. The query will run if you press the ▶ sign on the endpoint in the bottom left corner.](png/wikidata-tutorial/sparql-example-bach-children-without-labels.png)](https://query.wikidata.org/#SELECT%20%3Fchild%0AWHERE%0A%7B%0A%23%20%3Fchild%20%20father%20%20%20Bach%0A%20%20%3Fchild%20wdt%3AP22%20wd%3AQ1339.%0A%7D)

The first querry will provide you with identifiers, which is great if you are a programmer and you are wiring your database to Wikidata, but less impressive if you are getting familiar with SPARQL and you want to see clearly the fruits of your work.

Luckily, Wikidata has a human-friendly extension to SPARQL. If you add the following command to your query: `SERVICE wikibase:label { bd:serviceParam wikibase:language "[AUTO_LANGUAGE]".`somewhere within the `WHERE` clause, you get additional variables: For every variable `?foo` in your query, you now also have a variable `?fooLabel`, which contains the label of the item behind `?foo`.

If you add this to the `SELECT` clause, you get the item as well as its label:

```{r, eval=FALSE}
SELECT ?child ?childLabel
WHERE
{
# ?child  father   Bach
  ?child wdt:P22 wd:Q1339.
  SERVICE wikibase:label { bd:serviceParam wikibase:language "[AUTO_LANGUAGE]". }
}
```

[![Click on the image to try it out live on the Wikidata SPARQL Endpoint. The query will run if you press the ▶ sign on the endpoint in the bottom left corner↗.](png/wikidata-tutorial/sparql-example-bach-children-with-labels.png){fig-align="center"}](https://query.wikidata.org/#SELECT%20%3Fchild%20%3FchildLabel%0AWHERE%0A%7B%0A%20%20%3Fchild%20wdt%3AP22%20wd%3AQ1339%3B%0A%20%20%20%20%20%20%20%20%20wdt%3AP25%20wd%3AQ57487.%0A%20%20SERVICE%20wikibase%3Alabel%20%7B%20bd%3AserviceParam%20wikibase%3Alanguage%20%22%5BAUTO_LANGUAGE%5D%22.%20%7D%0A%7D)

Try running that query – you should see not only the item numbers, but also the names of the various children.

| child                                              | childLabel                      |
|-------------------------|-----------------------------------------------|
| [wd:Q57225](http://www.wikidata.org/entity/Q76428) | Johann Christoph Friedrich Bach |
| [wd:Q76428](http://www.wikidata.org/entity/Q76428) | Carl Philipp Emanuel Bach       |
| …                                                  |                                 |

### Pre-filter Wikidata

When you work with OpenCollections or Wikibase, you may want to synchronize your knowledge graph with Wikidata. A straightforward way to do this is to import a part of the Wikidata knowledge graph into your instance.

Imagine you would like to work with the biographical data of photographers connected to Hungary. The following query can show you who has information on Wikidata. You may decide to import this information and use it as a starting point.

```{r hungary-photographers, eval=FALSE}
# Photographers: citizens of Hungary

SELECT ?item ?itemLabel  ?givenNameLabel ?lastnameLabel ?birthdate ?deathdate ?nationalityLabel ?itemDescription WHERE {
    ?item wdt:P31 wd:Q5 .                # instance of human
    ?item wdt:P106/wdt:P279* wd:Q33231.  # occupation,subclass of occupation photographer 
    ?item wdt:P27 wd:Q28.                # country of citizenship is Hungary  
    optional { ?item wdt:P735 ?lastname . }
    optional { ?item wdt:P734 ?givenName . }
    optional { ?item wdt:P569 ?birthdate . }
    optional { ?item wdt:P570 ?deathdate . }
    optional { ?item wdt:P27 ?nationality . }

  SERVICE wikibase:label { bd:serviceParam wikibase:language "en,hu" }
}

order by ?itemLabel
```

[Try it out↗](https://query.wikidata.org/#%23%20Photographers%20who%20were%20citizens%20of%20Hungary%0A%0ASELECT%20%3Fitem%20%3FitemLabel%20%20%3FgivenNameLabel%20%3FlastnameLabel%20%3Fbirthdate%20%3Fdeathdate%20%3FnationalityLabel%20%3FitemDescription%20WHERE%20%7B%0A%20%20%20%20%3Fitem%20wdt%3AP31%20wd%3AQ5%20.%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20instance%20of%20human%0A%20%20%20%20%3Fitem%20wdt%3AP106%2Fwdt%3AP279%2a%20wd%3AQ33231.%20%20%23%20occupation%20or%20subclass%20of%20occupation%20that%20is%20photographer%20%0A%20%20%20%20%23%3Fitem%20wdt%3AP27%20wd%3AQ28.%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20country%20of%20citizenship%20is%20Hungary%20%20%0A%20%20%20%20optional%20%7B%20%3Fitem%20wdt%3AP735%20%3Flastname%20.%20%7D%0A%20%20%20%20optional%20%7B%20%3Fitem%20wdt%3AP734%20%3FgivenName%20.%20%7D%0A%20%20%20%20optional%20%7B%20%3Fitem%20wdt%3AP569%20%3Fbirthdate%20.%20%7D%0A%20%20%20%20optional%20%7B%20%3Fitem%20wdt%3AP570%20%3Fdeathdate%20.%20%7D%0A%20%20%20%20optional%20%7B%20%3Fitem%20wdt%3AP27%20%3Fnationality%20.%20%7D%0A%0A%20%20SERVICE%20wikibase%3Alabel%20%7B%20bd%3AserviceParam%20wikibase%3Alanguage%20%22en%2Chu%22%20%7D%0A%7D%0A%0Aorder%20by%20%3FitemLabel). Beware, that Wikidata is huge, and query may take minutes to run; you often get an error message that your query run out of resources. Then try again.

Or similarly, with composers connected to Slovakia:

```{r, eval=FALSE}
# Composers: citizens of Slovakia

SELECT ?item ?itemLabel  ?givenNameLabel ?lastnameLabel ?birthdate ?deathdate ?nationalityLabel ?itemDescription WHERE {
    ?item wdt:P31 wd:Q5 .                # instance of human
    ?item wdt:P106/wdt:P279* wd:Q36834.  # occupation or subclass of occupation that is composer
    ?item wdt:P27 wd:Q214.               # country of citizenship is Slovakia  
    optional { ?item wdt:P735 ?lastname . }
    optional { ?item wdt:P734 ?givenName . }
    optional { ?item wdt:P569 ?birthdate . }
    optional { ?item wdt:P570 ?deathdate . }
    optional { ?item wdt:P27 ?nationality . }

  SERVICE wikibase:label { bd:serviceParam wikibase:language "en,sk,de,hu" }
}

order by ?itemLabel
```

[Try it out↗](https://query.wikidata.org/#%23%20Composers%3A%20citizens%20of%20Slovakia%0A%0ASELECT%20%3Fitem%20%3FitemLabel%20%20%3FgivenNameLabel%20%3FlastnameLabel%20%3Fbirthdate%20%3Fdeathdate%20%3FnationalityLabel%20%3FitemDescription%20WHERE%20%7B%0A%20%20%20%20%3Fitem%20wdt%3AP31%20wd%3AQ5%20.%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20instance%20of%20human%0A%20%20%20%20%3Fitem%20wdt%3AP106%2Fwdt%3AP279%2a%20wd%3AQ36834.%20%20%23%20occupation%20or%20subclass%20of%20occupation%20that%20is%20composer%0A%20%20%20%20%3Fitem%20wdt%3AP27%20wd%3AQ214.%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20country%20of%20citizenship%20is%20Slovakia%20%20%0A%20%20%20%20optional%20%7B%20%3Fitem%20wdt%3AP735%20%3Flastname%20.%20%7D%0A%20%20%20%20optional%20%7B%20%3Fitem%20wdt%3AP734%20%3FgivenName%20.%20%7D%0A%20%20%20%20optional%20%7B%20%3Fitem%20wdt%3AP569%20%3Fbirthdate%20.%20%7D%0A%20%20%20%20optional%20%7B%20%3Fitem%20wdt%3AP570%20%3Fdeathdate%20.%20%7D%0A%20%20%20%20optional%20%7B%20%3Fitem%20wdt%3AP27%20%3Fnationality%20.%20%7D%0A%0A%20%20SERVICE%20wikibase%3Alabel%20%7B%20bd%3AserviceParam%20wikibase%3Alanguage%20%22en%2Csk%2Cde%2Chu%22%20%7D%0A%7D%0A%0Aorder%20by%20%3FitemLabel)
